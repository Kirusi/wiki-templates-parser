(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./generated/generated-parser.js":
/*!***************************************!*\
  !*** ./generated/generated-parser.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar parser = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,7],$V2=[1,8],$V3=[1,10],$V4=[5,6,9,10,11,12,13,16],$V5=[11,13];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"contents\":3,\"content\":4,\"EOF\":5,\"TEXT\":6,\"expr\":7,\"template\":8,\"OPEN_VAR_TAG\":9,\"CLOSE_VAR_TAG\":10,\"PIPE\":11,\"OPEN_TMPL_TAG\":12,\"CLOSE_TMPL_TAG\":13,\"parameters\":14,\"parameter\":15,\"ASSIGN\":16,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",6:\"TEXT\",9:\"OPEN_VAR_TAG\",10:\"CLOSE_VAR_TAG\",11:\"PIPE\",12:\"OPEN_TMPL_TAG\",13:\"CLOSE_TMPL_TAG\",16:\"ASSIGN\"},\nproductions_: [0,[3,2],[3,1],[4,1],[4,1],[4,1],[4,2],[4,2],[4,2],[7,3],[7,4],[7,2],[7,3],[8,3],[8,4],[8,4],[8,5],[8,2],[8,3],[14,1],[14,2],[15,2],[15,4]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n{ return $$[$0-1]; }\nbreak;\ncase 2:\n{ return \"\"; }\nbreak;\ncase 3:\n{ yy.util.log(\"CONTENT: TEXT\"); this.$ = $$[$0]; }\nbreak;\ncase 4:\n{ yy.util.log(\"CONTENT: expr\"); this.$ = $$[$0]; }\nbreak;\ncase 5:\n{ yy.util.log(\"CONTENT: template\"); this.$ = $$[$0]; }\nbreak;\ncase 6:\n{ yy.util.log(\"CONTENT: content TEXT\"); this.$ = $$[$0-1] + $$[$0]; }\nbreak;\ncase 7:\n{ yy.util.log(\"CONTENT: content expr\"); this.$ = $$[$0-1] + $$[$0]; }\nbreak;\ncase 8:\n{ yy.util.log(\"CONTENT: content template\"); this.$ = $$[$0-1] + $$[$0]; }\nbreak;\ncase 9:\n{ yy.util.log(\"EXPR: no pipe\"); this.$= yy.util.lookupVar(yy.ctx, $$[$0-1], false); }\nbreak;\ncase 10:\n{ yy.util.log(\"EXPR: with pipe\"); this.$= yy.util.lookupVar(yy.ctx, $$[$0-2], true); }\nbreak;\ncase 11:\n{ yy.util.log(\"EXPR: empty\"); this.$= \"{{{}}}\"; }\nbreak;\ncase 12:\n{ yy.util.log(\"EXPR: empty with pipe\"); this.$= \"\"; }\nbreak;\ncase 13:\n{ yy.util.log(\"TMPL: regular\"); this.$= yy.util.parseTemplate(yy.newParserFunc, yy.util.createNewCtx(yy.ctx), $$[$0-1]); }\nbreak;\ncase 14:\n{ yy.util.log(\"TMPL: pipe\");  this.$= yy.util.parseTemplate(yy.newParserFunc, yy.util.createNewCtx(yy.ctx), $$[$0-2]); }\nbreak;\ncase 15:\n{ yy.util.log(\"TMPL: params\"); this.$= yy.util.parseTemplate(yy.newParserFunc, yy.util.createNewCtx(yy.ctx), $$[$0-2]); }\nbreak;\ncase 16:\n{ yy.util.log(\"TMPL: params and pipe\"); this.$= yy.util.parseTemplate(yy.newParserFunc, yy.util.createNewCtx(yy.ctx), $$[$0-3]); }\nbreak;\ncase 17: case 18:\n{ yy.util.log(\"TMPL: regular\"); this.$= \"{{}}\"; }\nbreak;\ncase 19:\n{ yy.util.log(\"PARAMETERS start\"); }\nbreak;\ncase 20:\n{ yy.util.log(\"PARAMETERS add\"); }\nbreak;\ncase 21:\n{ yy.util.log(\"PARAM: non-named '\" + $$[$0] + \"'\"); if (! yy.ctx.numberedParams) { yy.ctx.numberedParams = []; } yy.ctx.numberedParams.push($$[$0]); }\nbreak;\ncase 22:\n{ yy.util.log(\"PARAM: named '\" + $$[$0-2] + \"'='\" + $$[$0] + \"'\"); if (! yy.ctx.namedParams) { yy.ctx.namedParams = {}; } yy.ctx.namedParams[$$[$0-2]]=$$[$0]; }\nbreak;\n}\n},\ntable: [{3:1,4:2,5:[1,3],6:$V0,7:5,8:6,9:$V1,12:$V2},{1:[3]},{5:[1,9],6:$V3,7:11,8:12,9:$V1,12:$V2},{1:[2,2]},o($V4,[2,3]),o($V4,[2,4]),o($V4,[2,5]),{4:13,6:$V0,7:5,8:6,9:$V1,10:[1,14],11:[1,15],12:$V2},{4:16,6:$V0,7:5,8:6,9:$V1,11:[1,18],12:$V2,13:[1,17]},{1:[2,1]},o($V4,[2,6]),o($V4,[2,7]),o($V4,[2,8]),{6:$V3,7:11,8:12,9:$V1,10:[1,19],11:[1,20],12:$V2},o($V4,[2,11]),{10:[1,21]},{6:$V3,7:11,8:12,9:$V1,11:[1,23],12:$V2,13:[1,22],14:24,15:25},o($V4,[2,17]),{13:[1,26]},o($V4,[2,9]),{10:[1,27]},o($V4,[2,12]),o($V4,[2,13]),{4:29,6:$V0,7:5,8:6,9:$V1,12:$V2,13:[1,28]},{11:[1,31],13:[1,30],15:32},o($V5,[2,19]),o($V4,[2,18]),o($V4,[2,10]),o($V4,[2,14]),o($V5,[2,21],{7:11,8:12,6:$V3,9:$V1,12:$V2,16:[1,33]}),o($V4,[2,15]),{4:29,6:$V0,7:5,8:6,9:$V1,12:$V2,13:[1,34]},o($V5,[2,20]),{4:35,6:$V0,7:5,8:6,9:$V1,12:$V2},o($V4,[2,16]),o($V5,[2,22],{7:11,8:12,6:$V3,9:$V1,12:$V2})],\ndefaultActions: {3:[2,2],9:[2,1]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:return 6;\nbreak;\ncase 1:yy_.yytext='\\{'; return 6;\nbreak;\ncase 2:yy_.yytext='\\}'; return 6;\nbreak;\ncase 3:yy_.yytext='\\|'; return 6;\nbreak;\ncase 4:yy_.yytext='\\='; return 6;\nbreak;\ncase 5:yy_.yytext='\\\\'; return 6;\nbreak;\ncase 6:yy_.yytext='='; return 6;\nbreak;\ncase 7:yy_.yytext='\\|'; return 6;\nbreak;\ncase 8:this.begin('varExpr'); return 9;\nbreak;\ncase 9:this.popState(); return 10;\nbreak;\ncase 10:return 11;\nbreak;\ncase 11:this.begin('template'); return 12;\nbreak;\ncase 12:this.popState(); return 13;\nbreak;\ncase 13:return 16;\nbreak;\ncase 14:yy_.yytext='\\{'; return 6;\nbreak;\ncase 15:yy_.yytext='\\}'; return 6;\nbreak;\ncase 16:return 5;\nbreak;\n}\n},\nrules: [/^(?:(?:[^\\{\\}(\\\\)\\|\\=]|\\n|[\\(\\)])+)/,/^(?:(\\\\)\\{)/,/^(?:(\\\\)\\})/,/^(?:(\\\\)\\|)/,/^(?:(\\\\)\\=)/,/^(?:(\\\\))/,/^(?:=)/,/^(?:\\|)/,/^(?:\\{\\{\\{)/,/^(?:\\}\\}\\})/,/^(?:\\|)/,/^(?:\\{\\{)/,/^(?:\\}\\})/,/^(?:=)/,/^(?:\\{)/,/^(?:\\})/,/^(?:$)/],\nconditions: {\"varExpr\":{\"rules\":[0,1,2,3,4,5,6,8,9,10,11,14,15],\"inclusive\":false},\"template\":{\"rules\":[0,1,2,3,4,5,8,10,11,12,13,14,15],\"inclusive\":false},\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,11,14,15,16],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\n\nif (true) {\n    exports.parser = parser;\n    exports.Parser = parser.Parser;\n    exports.parse = function () { return parser.parse.apply(parser, arguments); };\n}\n\n//# sourceURL=webpack:///./generated/generated-parser.js?");

/***/ }),

/***/ "./src/private/context-util.js":
/*!*************************************!*\
  !*** ./src/private/context-util.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nlet LOG_ENABLED = false;\r\n\r\nclass ContextUtil {\r\n    lookupVar(ctx, varName, isOptional) {\r\n        this.log(`lookupVar: \"${varName}\"`);\r\n        let res = '';\r\n        varName = `${varName}`.trim();\r\n        if (varName.match(/^(\\d)+$/)) {\r\n            let argPos = parseInt(varName, 10);\r\n            if (ctx.posArgs[argPos - 1] !== undefined) {\r\n                res = ctx.posArgs[argPos - 1];\r\n            }\r\n            else {\r\n                if (!isOptional) {\r\n                    res = `{{{${varName}}}}`;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if ((ctx.namedArgs !== undefined) && (ctx.namedArgs[varName] !== undefined)) {\r\n                res = ctx.namedArgs[varName];\r\n            }\r\n            else {\r\n                if (!isOptional) {\r\n                    res = `{{{${varName}}}}`;\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    parseTemplate(newParserFunc, ctx, templateName) {\r\n        this.log(`parseTemplate: \"${templateName}\"`);\r\n        templateName = `${templateName}`.trim();\r\n        let res = '';\r\n        if ((ctx.templates) && (ctx.templates[templateName] !== undefined)) {\r\n            let parser = newParserFunc();\r\n            parser.yy.ctx = ctx;\r\n            parser.yy.util = new ContextUtil();\r\n            parser.yy.newParserFunc = newParserFunc;\r\n            this.log(`parseTemplate: source=\"${ctx.templates[templateName]}\"`);\r\n            res = parser.parse(ctx.templates[templateName]);\r\n        }\r\n        else {\r\n            res = `{{${templateName}}}`;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    createNewCtx(ctx) {\r\n        let newCtx = {};\r\n        newCtx.templates = ctx.templates;\r\n        newCtx.posArgs = ctx.numberedParams;\r\n        newCtx.namedArgs = ctx.namedParams;\r\n        delete ctx.numberedParams;\r\n        delete ctx.namedParams;\r\n        return newCtx;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    log(msg) {\r\n        if (LOG_ENABLED) {\r\n            // eslint-disable-next-line no-console\r\n            console.log(msg);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = ContextUtil;\n\n//# sourceURL=webpack:///./src/private/context-util.js?");

/***/ }),

/***/ "./src/public/wiki-template-parser.js":
/*!********************************************!*\
  !*** ./src/public/wiki-template-parser.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nconst ContextUtil = __webpack_require__(/*! ../private/context-util */ \"./src/private/context-util.js\");\r\n\r\n/**  Jison-generated parser */\r\nconst GeneratedParser = __webpack_require__(/*! ../../generated/generated-parser */ \"./generated/generated-parser.js\");\r\n\r\nfunction render(template, ctx) {\r\n    /* Parser object is not re-entrant.\r\n       Instantiation of generated parser is light and fast. Create a new instance for every call. */\r\n    const parser = new GeneratedParser.Parser();\r\n    parser.yy.ctx = ctx;\r\n    parser.yy.util = new ContextUtil();\r\n    parser.yy.newParserFunc = function newParserFunc() {\r\n        return new GeneratedParser.Parser();\r\n    };\r\n    let result = parser.parse(template);\r\n    return result;\r\n}\r\n\r\nmodule.exports = {\r\n    render: render,\r\n};\r\n\n\n//# sourceURL=webpack:///./src/public/wiki-template-parser.js?");

/***/ }),

/***/ 0:
/*!**************************************************!*\
  !*** multi ./src/public/wiki-template-parser.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./src/public/wiki-template-parser.js */\"./src/public/wiki-template-parser.js\");\n\n\n//# sourceURL=webpack:///multi_./src/public/wiki-template-parser.js?");

/***/ })

/******/ });
});